{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Button.svelte",
    "../InputText.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Button from \"./Button.svelte\";\n  import InputText from \"./InputText.svelte\";\n\n  let principal = 0;\n  let rates = 0;\n  let terms = 0;\n\n  let totalReturns = 0;\n  let interest = 0;\n  let interestPerYr = [];\n\n  function setState(props) {\n    Object.keys(props).map(key => {\n      if (key === \"principal\") {\n        principal = props[key];\n      } else if (key === \"rates\") {\n        rates = props[key];\n      } else if (key === \"terms\") {\n        terms = props[key];\n      }\n    });\n  }\n\n  function compileReturns() {\n    totalReturns = parseInt(principal, 10);\n    interestPerYr = [];\n    interest = 0;\n    function runCompile(principal, rates, terms) {\n      if (terms === 0) {\n        return;\n      }\n      const yrInterest = (principal * rates) / 100;\n      interestPerYr = [...interestPerYr, yrInterest];\n      totalReturns += yrInterest;\n      interest += yrInterest;\n      runCompile(totalReturns, rates, terms - 1);\n    }\n\n    runCompile(parseInt(principal, 10), parseInt(rates, 10), parseInt(terms, 10));\n  }\n</script>\n\n<style>\n  main {\n    font-family: sans-serif;\n    font-size: 12px;\n    text-align: center;\n    color: #555;\n  }\n  article {\n    margin: 10px 0;\n    color: #999;\n  }\n\n  section.result_display {\n    border-top: solid 2px #e4f4e4;\n    margin-top: 30px;\n  }\n</style>\n\n<main>\n\t<h1>Hello CodeSandbox</h1>\n\t<h4>Start editing to see some magic happen!</h4>\n  <article>\n    Principal: \n    <InputText value={principal} onChange={(e) => setState({principal: e.target.value})} />\n  </article>\n  <article>\n    Rates(%): \n    <InputText value={rates} onChange={(e) => setState({rates: e.target.value})} />\n  </article>\n  <article>\n    Terms(yrs): \n    <InputText value={terms} onChange={(e) => setState({terms: e.target.value})} />\n  </article>\n\t<Button onClick={() => compileReturns()} label='Compile Returns' />\n  <section class=\"result_display\">\n    <article>Principal: {principal.toLocaleString()}</article>\n    <article>Rates: {rates}%</article>\n    <article>Terms: {terms}yrs</article>\n    \n  </section>\n  <section class=\"result_display\">\n    \n    {#each interestPerYr as iny, i} \n      <article>Year {i + 1} interest: {Math.round(iny)}</article>\n    {/each}\n    <h4>Interest Acrued: {interest.toLocaleString()}</h4>\n    <h4>Total Returns: {totalReturns.toLocaleString()}</h4>\n  </section>\n</main>",
    "<script>\n\texport let label = \"Button\";\n\texport let onClick;\n</script>\n\n<style>\n\tbutton {\n\t  background: #ff3e00;\n\t  color: white;\n\t  border: none;\n\t  padding: 8px 12px;\n\t  border-radius: 2px;\n\t}\n</style>\n\n<button on:click={onClick}>\n  {label}\n</button>",
    "<script>\n  export let value;\n  export let onChange;\n</script>\n\n<style>\n  input {\n    padding: 3px;\n    border-color: #e5e5e5;\n    border-width: 1px;\n    border-radius: 3px\n  }\n</style>\n\n\n<input type='text' on:change={onChange} value={value} />"
  ],
  "names": [],
  "mappings": "AA4CE,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,UAAU,CACvB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,IAAI,AACb,CAAC,AACD,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,IAAI,CAAC,CAAC,CACd,KAAK,CAAE,IAAI,AACb,CAAC,AAED,OAAO,eAAe,eAAC,CAAC,AACtB,UAAU,CAAE,KAAK,CAAC,GAAG,CAAC,OAAO,CAC7B,UAAU,CAAE,IAAI,AAClB,CAAC;ACpDF,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,aAAa,CAAE,GAAG,AACpB,CAAC;ACNA,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,GAAG,CACZ,YAAY,CAAE,OAAO,CACrB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG;EACpB,CAAC"
}